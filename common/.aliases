#########################################
###              ALIASES              ###
#########################################
function changemode (){
	xrandr --newmode "1920x1080_60.00"  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsyn;
	xrandr --addmode DP-2 1920x1080_60.00;
	xrandr --output DP-2 --mode 1920x1080_60.00;
}

#########################################
### Shortcuts                         ###
#########################################

## SYSTEM
alias logoff="pkill -KILL -u michael"
datediff () { d1=$(date -d $1 +%s);d2=$(date -d 'now' +%s);echo "$(( (d2 - d1) / 86400 )) days";}
alias weather="curl http://wttr.in/London"
alias doremi="sudo apt-get update && sudo apt-get upgrade && apm update --no-confirm && conda update conda --yes && conda update --all --yes && weather && echo \"Tage im Mai\t Tage im September \" && datediff 06/23/2016 && datediff 09/12/2016"
alias ugit="git pull && git submodule update --init --recursive"
alias timestamp="date +%Y_%m_%d-%H_%M"
alias suspend="systemctl suspend"
alias vi="vim"
alias le="less"
alias c="clear"
function hl () { grep -A1 "Host $1" $HOME/.ssh/config | awk '/HostName/{getline; print}' | awk '{print $2}';}
alias pack="tar -zcvf"
alias fasollati="bash $HOME/.backup/local-backup.sh && echo \"df -h\" | sftp storagebox:"
alias check-storage="echo \"df -h\" | sftp storagebox"

alias m-timezone="timedatectl"
alias m-rsync="rsync -azP"
m-filesize () { echo "df -h" | sftp $1 ;}
alias matlab-desktop="/home/michael/.matlab/bin/matlab &"

## Latex & PDF viewer
alias lat="latexmk"
alias late="latexmk -halt-on-error"
alias lac="latexmk -c"
alias lacc="latexmk -C"
alias vw="evince"
alias vd="evince *.pdf"
alias arw="arara *.tex && evince *(.om[1])"
alias ara="arara *.tex"

## Git
alias g="git"
source $HOME/.gitalias
function vm () { pandoc -s -f markdown -t man $1 | man -l - ;}

## Jupyter
alias jup="jupyter notebook"

## Python
alias i2="ipython2 -i --colors=Linux"
alias i="ipython3 -i -c \"import numpy as np;from math import *;\" --colors=Linux"

## Julia
alias ju="julia"

## SSH
ssi () { ssh "$1" -o "UserKnownHostsFile /dev/null"; }

## TMUX
# connect to running tmux session on ssh host
sst () { ssh "$1" -t tmux a; }
alias t="tmux"
alias ta="tmux attach"
alias tma='tmux attach -d -t'
alias tmn='tmux new -s $(basename $(pwd))'
alias tml='tmux list-sessions'
alias tls='tmux ls'

## Shortcuts
alias dun="du -chs | sort -h"
alias dfn="df -Tha --total"
#alias webify="mogrify -resize 690\> *.png"
alias myip="curl http://ipecho.net/plain; echo"
alias wgetNice="wget --cut-dirs=100 -nH -np -r -c"
alias mkdir="mkdir -pv"
alias psn="ps auxf"
alias free="free -mt"
alias psg="ps aux | grep -v grep | grep -i -e VSZ -e"
alias fhere="find . -name "
alias cd..="cd .."
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

# make shell alert if running finished
alias alertify='PS1="$PS1\a"'

## Latex stuff
alias latex-duplicate-labels="zsh -c \"perl -nE 'say $1 if /(\\label[^}]*})/' **/*.tex | sort | uniq -c | sort -n\""

#########################################
### Helper functions                  ###
#########################################

alias scrotclip="scrot -s ~/.temp.png && xclip -selection clipboard -t image/png -i ~/.temp.png && rm -f ~/.temp.png"
function screenshot_to_text () {
    bash ~/.dotfiles/scripts/screenshot_to_text.sh; 
}

function extract-helper {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
 else
    if [ -f $1 ] ; then
        # NAME=${1%.*}
        # mkdir $NAME && cd $NAME
        case $1 in
          *.tar.bz2)   tar xvjf $1    ;;
          *.tar.gz)    tar xvzf $1    ;;
          *.tar.xz)    tar xvJf $1    ;;
          *.lzma)      unlzma $1      ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       unrar x -ad $1 ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xvf $1     ;;
          *.tbz2)      tar xvjf $1    ;;
          *.tgz)       tar xvzf $1    ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *.xz)        unxz $1        ;;
          *.exe)       cabextract $1  ;;
          *)           echo "extract: '$1' - unknown archive method" ;;
        esac
    else
        echo "$1 - file does not exist"
    fi
fi
}

untar () { tar â€“zxvf $1 ; }

function countdown () {
   date1=$((`date +%s` + $1));
   while [ "$date1" -ne `date +%s` ]; do
     echo -ne "$(date -u --date @$(($date1 - `date +%s`)) +%H:%M:%S)\r";
     sleep 0.1
   done
   beep -f 600 -r 3 -d 500;
   sleep 1; echo -e "\a";
}

function stopwatch () {
  date1=`date +%s`;
   while true; do
    echo -ne "$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\r";
    sleep 0.1
   done
   beep -f 600 -r 3 -d 500;
   sleep 1; echo -e "\a";
}

function summary () {
sort -n $1 | awk '
  BEGIN {
    c = 0;
    sum = 0;
  }
  $1 ~ /^[0-9]*(\.[0-9]*)?$/ {
    a[c++] = $1;
    sum += $1;
  }
  END {
    ave = sum / c;
    if( (c % 2) == 1 ) {
      median = a[ int(c/2) ];
    } else {
      median = ( a[c/2] + a[c/2-1] ) / 2;
    }
    OFS="\t";
    print sum, c, ave, median, a[0], a[c-1];
  }
';}

# fix caps issue
capsfix () { python -c "from ctypes import *; X11 = cdll.LoadLibrary(\"libX11.so.6\"); display = X11.XOpenDisplay(None); X11.XkbLockModifiers(display, c_uint(0x0100), c_uint(2), c_uint(0)); X11.XCloseDisplay(display)" ; }
CAPSFIX () { python -c "from ctypes import *; X11 = cdll.LoadLibrary(\"libX11.so.6\"); display = X11.XOpenDisplay(None); X11.XkbLockModifiers(display, c_uint(0x0100), c_uint(2), c_uint(0)); X11.XCloseDisplay(display)" ; }

# remove whitespace from file
removeWhitespace () { mv "$1" "${1// /_}"; }

# overwrite $1 with random stream
overwrite () { pv -tpreb /dev/urandom | sudo dd of=$1 bs=4096; }

# find duplicate files
dupsearch () { find -not -empty -type f -printf "%s\n" | sort -rn | uniq -d | xargs -I{} -n1 find -type f -size {}c -print0 | xargs -0 md5sum | sort | uniq -w32 --all-repeated=separate; }

function debchanglog () {
        zless "/usr/share/doc/$1/changelog.Debian.gz"
}

#########################################
### Helper functions - pdfs           ###
#########################################

# convert pdf to eps
function mpdf-toeps () { inkscape $1 --export-eps=${1%.pdf}.eps;}

# count words in pdf
function mpdf-wordcount () { pdftotext $1 - | wc -w ;}

# crop images in pdf file
function mpdf-crop () { pdfcrop $1;}

# convert pdf to png
function mpdf-convertToPNG(){
    convert -verbose -density 600 -trim $1 -quality 100 -sharpen 0x1.0 ${1%.pdf}.png;
}

function mpdf-webify(){
    convert -verbose -density 200 -trim $1 -quality 100 ${1%.pdf}.png;
}

# decrypt pdf
function mpdf-decrypt () {
    if [ ! -d $1 ]; then
        printf "File does not exist\n"
        exit -1
    fi
    mv $1 backup_$file
    qpdf --password=$2 --decrypt $1 decrypted_$1
    mv decrypted_$1 $file
}

# decrease size of pdf - Quality level in dPDFSETTINGS= are "/screen," "/ebook," "/printer" and "/prepress,"
mpdf-shrink () { mv $1 $1_original && /usr/bin/gs -dPDFSETTINGS=/ebook -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -sOutputFile=${1/_original} $1_original && if [ $(ls -l  $1 | cut -f 5 -d " ") -lt $(ls -l  $1_original | cut -f 5 -d " ") ]; then rm -f $1_original; else mv -f $1_original $1; fi ;}

# print content of file to pdf
mpdf-printFileToPdf () { cat "$1" | a2ps -=book -B -q --medium=A4dj --borders=no -o out12345678.ps && ps2pdf out12345678.ps printTerm.pdf && rm -f out12345678.ps ; }


#########################################
### Monitor and presentation settings ###
#########################################

# set dual/single monitors
dual-dp () {  xrandr --output eDP1 --primary --output DP1 --auto --right-of eDP1;}
dual-vga (){ xrandr --output eDP1 --primary --output DP2 --auto --right-of eDP1;}
single () { xrandr --output DP1 --off; xrandr --output DP2 --off ; xrandr --output HDMI1 --off ; xrandr --output HDMI2 --off ;}
present () { xrandr --output DP1 --auto ; xrandr --output DP2 --auto;}

# set background light
darken () { xbacklight -set 0 ; }
lighten () { xbacklight -set 100 ;}


#########################################
### Internet and IP settings          ###
#########################################

# download pdfs from webpage
web-wgetPDF () { wget -A pdf -p -E -k -K -np $1 ; }

# investigate IPs
alias web-wanip='dig +short myip.opendns.com @resolver1.opendns.com'
alias web-ip="curl ifconfig.me/ip"
web-quHOST () { host $1 | rev | cut -d " " -f1 | rev; }
web-quCountrybyIP () { curl ipinfo.io/$1 2&>/dev/null | grep -Po '"country":.*?[^\\]",' | perl -pe 's/"country"://; s/^"//; s/",$//; s/"//; s/^\s+//' ; }

# route through glaux-web
alias proxyssh="ssh glaux-web -D 8080 -N -C -o \"UserKnownHostsFile /dev/null\""
# -D: Tells SSH that we want a SOCKS tunnel on the specified port number (you can choose a number between 1025-65536)
# -f: Forks the process to the background
# -C: Compresses the data before sending it
# -q: Uses quiet mode
# -N: Tells SSH that no command will be sent once the tunnel is up


#########################################
### Backup and restore files          ###
#########################################

backup-manager () { bash $HOME/.backup/duplicity.sh; }
backup-list () { ls $HOME/.backup/ | sort -r | grep backup.tar.gz | head -1; }
backup-zotero () { bash $HOME/.backup/zotero-backup.sh; }
alias backup-package-list="dpkg --get-selections"

function backup-restore-signed {
    echo -e "Restore from $1 to $2"
    sleep 5
    _SIGN_KEY=4FF90AD4
    if [ ! -d $1 ]; then
        printf "Backup does not exist\n"
        return -1
    fi
    if [ -d $2 ]; then
        printf "Do not restore to an existing location\n"
        return -1
    fi
    duplicity --sign-key "$_SIGN_KEY" "file://$1" "file://$2"
}

function backup-restore-unsigned {
    echo -e "Restore from $1 to $2"
    sleep 5
    if [ ! -d $1 ]; then
        echo "Backup does not exist\n"
        return -1
    fi
    if [ -d $2 ]; then
        echo "Do not restore to an existing location\n"
        return -1
    fi
    duplicity --gpg-options "--skip-verify" "file://$1" $2
}

## secure tresor operations
backup-secure_shredFile () { echo "Are you sure, shredding may not work on SSD? [y/N] "; read response ; if [[ $response =~ ^(yes|y)$ ]]; then shred -n 30 -z -u  $1 ; else echo "exited"; fi ; }
backup-secure_encrypt-sign () { tar czvpf - $1 | gpg --symmetric --cipher-algo aes256 -o safe.tar.gz.gpg && gpg --armor --detach-sign safe.tar.gz.gpg; }
backup-secure_encrypt-only () { tar czvpf - $1 | gpg --symmetric --cipher-algo aes256 -o safe.tar.gz.gpg ; }
backup-secure_decrypt-signed () { gpg --verify $1.asc $1 && gpg -d $1 | tar xzvf - ; }
backup-secure_decrypt-nocheck () { gpg -d $1 | tar xzvf - ; }
#
