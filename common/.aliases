#########################################
###              ALIASES              ###
#########################################

## Shortcuts
alias lst="ls -lt"
alias sac="source activate"
alias logoff="pkill -KILL -u $USER"
alias takeover="tmux detach -a"
alias vi="nvim"
alias vim="nvim"
alias le="less"
alias c="clear"
alias cdp="cd -P"
alias pack="tar -zcvf"
alias pingg="ping 8.8.8.8"
alias s="dirs -v" # zprezto directory module
alias f='fasd_cd -i' # zprezto fasd module
alias agenda="gcalcli agenda"
do-most_recent_container() { docker exec -it `docker ps -a --no-trunc -q | head -n 1` bash; }

alias tailwatch="watch -n 1 'tail $(ls -lA -t | head -n 1)'"
alias brd="bash runDocker.sh"
alias dun="du -chs | sort -h"
alias dfn="df -Tha --total"
#alias webify="mogrify -resize 690\> *.png"
alias myip="curl http://ipecho.net/plain; echo"
alias wgetNice="wget --cut-dirs=100 -nH -np -r -c"
alias mkdir="mkdir -pv"
alias psn="ps auxf"
alias free="free -mt"
alias psg="ps aux | grep -v grep | grep -i -e VSZ -e"
alias fhere="find . -name "
alias cd..="cd .."
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

alias apu="sudo apt-get update"
alias apg="sudo apt-get upgrade"
alias api="sudo apt-get install"
alias reboot="sudo systemctl reboot"
alias poweroff="sudo systemctl poweroff"


#########################################
###              CODING               ###
#########################################

## python
function retab () { python ~/.dotfiles/scripts/reindent.py $1 ; }

# conda backup
alias backup-conda-all="bash ~/.dotfiles/scripts/conda_backup.sh"


#########################################
###              SYSTEM               ###
#########################################

datediff () { d1=$(date -d $1 +%s);d2=$(date -d 'now' +%s);echo "$(( (d2 - d1) / 86400 )) days";}
function wttr () {
    # change Paris to your default location
    curl -s -S -H "Accept-Language: en" wttr.in/"${1:-Berlin}" | head -q -n -3 ; }
alias weather="curl -s -S http://wttr.in/Berlin | head -q -n -3"
function daily-quote () { 
  source ~/.dotfiles/common/quotes.dec
  n_quotes=${#quotearray[@]}+1
  rand=$(($RANDOM%$n_quotes)) 
  echo ${quotearray[$rand]} ; }
alias clock="date | cut -d ' ' -f 4"
alias daily-cal="ncal -A 1 -M -b -w"
alias upip="conda list | grep \"<pip>\" | awk '{print $1}' | xargs pip install -U"
alias doremi="apt-mark showhold && sudo apt-get update && sudo apt-get upgrade && conda update conda --yes && conda update --all --yes && sudo apt-get autoremove && echo \"\" && weather && echo \"Tage im Mai: $(datediff 04/29/2018)\tTage im September: $(datediff 06/23/2016)\" && daily-cal && daily-quote"
alias daily-info="weather && echo \"Tage im Mai: $(datediff 08/14/2018)\tTage im September: $(datediff 06/23/2016)\" && daily-cal && daily-quote"
alias ugit="git pull && git submodule update --recursive"
function update-git () { for i in **; do cd $i; ugit; cd ..; done ; }
alias timestamp="date +%Y_%m_%d-%H_%M"
alias suspend="systemctl suspend"
alias m-timezone="timedatectl"
alias m-timezone-update="sudo dpkg-reconfigure tzdata"
alias m-rsync="rsync -azP"
m-filesize () { echo "df -h" | sftp $1 ;}

## Alerts, a set of flexible alerts to notify about the end of a computation in terminal and tmux
alias alert-visual="echo -e '\a'"
alias alert-all="echo -ne \"\033]777;notify-send;$(hostname);$(date '+%Y-%m-%d %H:%M:%S');Computation completed!;\007\007\""
alias alert-sound="aplay -q $HOME/.dotfiles/files/soft_beep.way"
alias talert-visual="echo -ne '\033Ptmux;\033\a\033\\'"
alias talert-all="echo -ne '\033Ptmux;\033\033]777;notify-send;$(hostname);$(date '+%Y-%m-%d %H:%M:%S');Computation completed!;\007\007\\033\\'"

# make shell alert if running finished
alias alertify='PS1="$PS1\a"'

###########################
###       SERVICES      ###
###########################

## Latex, Markdown & PDF viewer
alias lat="latexmk"
alias late="latexmk -halt-on-error"
alias lac="latexmk -c"
alias lacc="latexmk -C"
alias vw="zathura"
alias vd="zathura *.pdf"
alias arw="arara *.tex && evince *(.om[1])"
alias ara="arara *.tex"
function vm () { pandoc -s -f markdown -t man $1 | man -l - ;}

## Latex stuff
alias latex-duplicate-labels="zsh -c \"perl -nE 'say $1 if /(\\label[^}]*})/' **/*.tex | sort | uniq -c | sort -n\""

## APM (atom package manager)
alias apm-export="apm list --installed --bare"
alias apm-import="apm install --packages-file"

## AWS
function aws-login () { $(aws ecr get-login --no-include-email); }

## Docker
alias d="docker"
alias dim="docker images"
alias dps="docker ps"
alias deb="docker run --rm -it test:latest /bin/bash"
function dev () { docker build -t $1 . ; }
function do-bash () { docker exec -i -t $1 /bin/bash ; }
alias do-count="docker ps -q | wc -l"
function do-stopall () { docker container stop $(docker container ls -a -q) ; }
function do-cleanup () { docker rm $(docker ps -qa --no-trunc --filter "status=exited"); docker rmi $(docker images --filter "dangling=true" -q --no-trunc) ; }
function do-export () { docker save $1 > $1.tar; }

## Digital Ocean
function dig-create() { doctl compute droplet create glaux-web --image debian-9-x64 --region $1 --size 1gb --ssh-keys 8c:7e:36:3e:d0:f5:98:d7:46:86:b5:78:7d:2e:9a:1e &&
sleep 5 && doctl compute firewall add-droplets de489db5-1e04-40e6-891c-8bdfa47745c8 --droplet-ids $(doctl compute droplet list | tail -n 1 |  awk '{print $1}') && sleep 10 ; } 
function dig-connect() { ss-local -c /etc/shadowsocks.json -s $(doctl compute droplet list | tail -n 1 |  awk '{print $3}') ; }
function dig-domain() { doctl compute domain records create $(doctl compute domain list | tail -n 1 | awk '{print $1}') --record-type A --record-name web --record-data $(doctl compute droplet list | tail -n 1 |  awk '{print $3}') --record-ttl 180 ; }
function dig-close () { doctl compute droplet delete $(doctl compute droplet list | tail -n 1 |  awk '{print $1}') && sleep 10 && doctl compute domain records delete $(doctl compute domain list | tail -n 1 | awk '{print $1}') $(doctl compute domain records list $(doctl compute domain list | tail -n 1 | awk '{print $1}') | grep "A" |  awk '{print $1}') && doctl compute droplet list ; }
alias dig-status="doctl compute droplet list"
dig-domain-status() { doctl compute domain records list $(doctl compute domain list | tail -n 1 | awk '{print $1}') ; } 
function dig-access () { doctl compute ssh $(doctl compute droplet list | tail -n 1 |  awk '{print $1}') ; } 
function dig-reboot() { doctl compute droplet-action reboot $(doctl compute droplet list | tail -n 1 | awk '{print $1}') ; }

## Git
alias g="git"
source $HOME/.gitalias
function gtrack () { git ls-files $1 --error-unmatch; echo $? ; }

## Jupyter
# alias jup="jupyter notebook"
alias jup="jupyter lab"

## Python
alias i2="ipython2 -i --colors=Linux"
alias i="ipython3 -i -c \"import numpy as np;import pandas as pd;from math import *;\" --colors=Linux"
# program to format python files
mformat-python () { PYTHONPATH=~/Software/yapf python ~/Software/yapf/yapf --style google $1 ; }

## Julia
alias j="julia"

## SSH
ssi () { ssh "$1" -o "UserKnownHostsFile /dev/null"; }

## TMUX
# connect to running tmux session on ssh host
sst () { ssh "$1" -t tmux a; }
alias t="tmux"
alias ta="tmux attach"
alias tma='tmux attach -d -t'
alias tmn='tmux new -s $(basename $(pwd))'
alias tml='tmux list-sessions'
alias tls='tmux ls'
alias tdelete="tmux kill-session -t"
tcreate () { bash ~/.dotfiles/scripts/tmux-dev.sh "$1" ; }
tmonitor () { bash ~/.dotfiles/scripts/tmux-mon.sh "$1" ; }


###########################
###        FILES        ###
###########################

function mfile-encrypt { openssl aes-256-cbc -a -salt -in $1 -out $2 ; }
function mfile-decrypt { openssl aes-256-cbc -d -a -in $1 -out $2 ; }

alias mpng-shrink="optipng"
alias mjpg-shrink="jpegoptim"

function de-archive () {
# remove leading character string (exact 10 characters) that could be used as unique identifier for cluster jobs
    files=( $@ )
    for i in "${files[@]}"; do
        new_name=${i#*.}
        uid=${i%%.*}
        if [ ${#uid} -eq 10 ]
        then
            if ! [[ -f $new_name ]]
            then
                mv $i $new_name;
            fi
        fi
    done
}

alias scrotclip="scrot -s ~/.temp.png && xclip -selection clipboard -t image/png -i ~/.temp.png && rm -f ~/.temp.png"
function screenshot_to_text () {
    bash ~/.dotfiles/scripts/screenshot_to_text.sh; 
}

# compression on linux
alias targz="tar czvf"
alias tarbz="tar cjvf"
alias tarxy="tar cJvf"
function extract-helper {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
 else
    if [ -f $1 ] ; then
        # NAME=${1%.*}
        # mkdir $NAME && cd $NAME
        case $1 in
          *.tar.bz2)   tar xvjf $1    ;;
          *.tar.gz)    tar xvzf $1    ;;
          *.tar.xz)    tar xvJf $1    ;;
          *.lzma)      unlzma $1      ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       unrar x -ad $1 ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xvf $1     ;;
          *.tbz2)      tar xvjf $1    ;;
          *.tgz)       tar xvzf $1    ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *.xz)        unxz $1        ;;
          *.exe)       cabextract $1  ;;
          *)           echo "extract: '$1' - unknown archive method" ;;
        esac
    else
        echo "$1 - file does not exist"
    fi
fi
}

untar () { tar â€“zxvf $1 ; }

function mlat () { for var in "$@"; do /bin/bash ~/.dotfiles/scripts/latexeqs.sh "$var"; done ; }

# convert svg to pdf or png with rsvg-convert (in librsvg package)
function msvg-topdf () { for var in "$@"; do rsvg-convert -f pdf -o ${var%.svg}.pdf $var; done ; }

# convert pdf to emf
function mpdf-toemf () { for var in "$@"; do pdf2svg $var ${var%.pdf}.svg ; inkscape ${var%.pdf}.svg -M ${var%.pdf}.emf ; done ; }

# convert pdf to emf
function mpdf-tosvg () { for var in "$@"; do pdf2svg $var ${var%.pdf}.svg ; done ; }

# convert pdf to png
function mpdf-topng () { for var in "$@"; do pdftoppm $var ${var%.pdf} -png -r 300 -singlefile ; done ; }

# convert pdf to png, specify resolution
function mpdf-topng-res () { pdftoppm $1 ${1%.pdf} -png -r $2 -singlefile ; }

# convert pdf to eps
function mpdf-toeps () { for var in "$@"; do inkscape $var --export-eps=${var%.pdf}.eps; done ; }

# count words in pdf
function mpdf-wordcount () { for var in "$@"; do pdftotext $var - | wc -w ; done ; }

# crop images in pdf file
function mpdf-crop () { for var in "$@"; do pdfcrop $var; done ; }

# change pdf format to a4
function mpdf-a4 () { pdfjam --outfile ${1%.pdf}_out.pdf --paper a4paper $1 ; }

# convert pdf to png
function mpdf-convertToPNG(){
    for var in "$@"
    do
      convert -verbose -density 600 -trim "$var" -quality 100 -sharpen 0x1.0 ${var%.pdf}.png;
    done
}

# create single pdf
function mpdf-view () {
    fh=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    pdftk "$@" cat output "/tmp/${fh}.pdf"
    zathura "/tmp/${fh}.pdf"
    unset fh;
}

function mpdf-join () {
    array123=( "${@}" );
    newfile123=${array123[-1]};
    array123=( "${array123[@]:0:$(( ${#array123[@]} - 1 ))}" );
    pdftk $array123 cat output $newfile123;
    unset newfile123;
    unset array123;
}

function mpdf-webify(){
    for var in "$@"; do convert -verbose -density 200 -trim $var -quality 100 ${var%.pdf}.png; done ; }

function mfigure (){
    pdftk A=$1 cat end output $2 
    mpdf-crop $2;
    mv -f ${2%.pdf}-crop.pdf $2;
    mpdf-convertToPNG $2;
    rm -f $1;
}

# decrypt pdf
function mpdf-decrypt () {
    if [ ! -d $1 ]; then
        printf "File does not exist\n"
        exit -1
    fi
    mv $1 backup_$file
    qpdf --password=$2 --decrypt $1 decrypted_$1
    mv decrypted_$1 $file
}

# decrease size of pdf - Quality level in dPDFSETTINGS= are "/screen," "/ebook," "/printer" and "/prepress,"
mpdf-shrink () { mv $1 $1_original && /usr/bin/gs -dPDFSETTINGS=/ebook -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -sOutputFile=${1/_original} $1_original && if [ $(ls -l  $1 | cut -f 5 -d " ") -lt $(ls -l  $1_original | cut -f 5 -d " ") ]; then rm -f $1_original; else mv -f $1_original $1; fi ;}

# print content of file to pdf
mpdf-printFileToPdf () { cat "$1" | a2ps -=book -B -q --medium=A4dj --borders=no -o out12345678.ps && ps2pdf out12345678.ps printTerm.pdf && rm -f out12345678.ps ; }

# check file content
mcheck-zerowidth () { grep "$(printf %b '\u200b')" $1 ; }

#########################################
### Helper functions                  ###
#########################################

function countdown () {
   date1=$((`date +%s` + $1));
   while [ "$date1" -ne `date +%s` ]; do
     echo -ne "$(date -u --date @$(($date1 - `date +%s`)) +%H:%M:%S)\r";
     sleep 0.1
   done
   beep -f 600 -r 3 -d 500;
   sleep 1; echo -e "\a";
}

function stopwatch () {
  date1=`date +%s`;
   while true; do
    echo -ne "$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\r";
    sleep 0.1
   done
   beep -f 600 -r 3 -d 500;
   sleep 1; echo -e "\a";
}

function summary () {
sort -g $1 | awk '
  BEGIN {
    c = 0;
    sum = 0;
  }
  $1 ~ /^[0-9]*(\.[0-9]*)?$/ {
    a[c++] = $1;
    sum += $1;
  }
  END {
    ave = sum / c;
    if( (c % 2) == 1 ) {
      median = a[ int(c/2) ];
    } else {
      median = ( a[c/2] + a[c/2-1] ) / 2;
    }
    OFS="\t";
    print "sum, count, average, median, min, max";
    print sum, c, ave, median, a[0], a[c-1];
  }
';}

# remove whitespace from file
removeWhitespace () { mv "$1" "${1// /_}"; }

# overwrite $1 with random stream
overwrite () { pv -tpreb /dev/urandom | sudo dd of=$1 bs=4096; }

# find duplicate files
dupsearch () { find -not -empty -type f -printf "%s\n" | sort -rn | uniq -d | xargs -I{} -n1 find -type f -size {}c -print0 | xargs -0 md5sum | sort | uniq -w32 --all-repeated=separate; }

function debchanglog () {
        zless "/usr/share/doc/$1/changelog.Debian.gz"
}


#########################################
### Internet and IP settings          ###
#########################################

# download pdfs from webpage
web-wgetPDF () { wget -A pdf -p -E -k -K -np $1 ; }

# investigate IPs
alias web-wanip='dig +short myip.opendns.com @resolver1.opendns.com'
alias web-ip="curl ifconfig.me/ip"
web-quHOST () { host $1 | rev | cut -d " " -f1 | rev; }
web-quCountrybyIP () { curl ipinfo.io/$1 2&>/dev/null | grep -Po '"country":.*?[^\\]",' | perl -pe 's/"country"://; s/^"//; s/",$//; s/"//; s/^\s+//' ; }

alias m-drivemount="google-drive-ocamlfuse ~/Drive"
