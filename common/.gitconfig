[core]
	editor = vim
	whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol,blank-at-eof,blank-at-eol
	pager = less -r
    # use more compression
    #compression = 9
[color]
	ui = auto
	interactive = auto
[color "branch"]
	current = yellow reverse
	local = yellow bold
	remote = green bold
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse
[color "status"]
	added = green bold
	changed = yellow bold
	untracked = red bold
[diff]
	tool = vimdiff
[difftool]
	prompt = false
[alias]
    glog = log --graph --full-history --all --color --pretty=tformat:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s%x20%x1b[33m(%an)%x1b[0m"
[github]
    user = leachim
[user]
    name = leachim
    email = leachim@users.noreply.github.com
[push]
    # sane default
    default = simple
[alias]
    # Show all configured aliases
    aliases = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\ \t => \\2/' | sort
	#amend to commit
   	amend = !git log -n 1 --pretty=tformat:%s%n%n%b | git commit -F - --amend

	s = !git status --short
	# View the log and diff for a commit (previous if no SHA1 provided)
	d = log -n1 -p --format=fuller
	#View a pretty git log with branch tree
	l = !git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

	# Return the repository's root directory (usefull for shell prompts)
    root = rev-parse --show-toplevel
    # Update all submodules
    usub = submodule update --init
    # Thin out older metadata within the repository, reduceses filesystem footprint
    utrim = !git reflog expire --expire=now --all && git gc --prune=now
	#Show all branches
   	br-all = branch -av
    #Show the current branch name
   	br-name = !git branch | grep "^*" | awk '{ print $2 }'
    #Which files are receiving the most "love"
   	churn = !git log --all -M -C --name-only --format='format:' "$@" | sort | grep -v '^$' | uniq -c | sort | awk 'BEGIN {print "count,file"} {print $1 "," $2}'
	# Save a repo as a tarball
	export = archive -o $1.tar.gz -9 --prefix=latest/

	## log stuff
	ls = log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset' --abbrev-commit
	la = log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci) %C(bold blue)<%an>%Creset' --abbrev-commit
	ll = log --graph --decorate --pretty=oneline --abbrev-commit
	lla = log --stat --graph --decorate --pretty=oneline --abbrev-commit --numstat
	#List oneline commits showing dates:
	lld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
	#List oneline commits showing relative dates:
	llr = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative

	## diff stuff
	dh = diff --color-words head
	#Show a diff last commit:
	dlc = diff --cached HEAD^
	# all commits related to a file
	fl = log -u

	# Being the Branch/Integration manager at my current client, I use these constantly to merge stuff:
	rev-ours = "!f() { git co --ours $@ && git add $@; }; f"
	rev-theirs = "!f() { git co --theirs $@ && git add $@; }; f"


    ############################
	## Using arguments
	############################
	# Grep from root folder:
	grep = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
	# list commits by date or author
	review = "!sh -c 'git log --all --oneline --reverse --date=local --since=\"$0\"'"
	whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
